#!/bin/bash
#
# Return a 2fa token, without repeating.
#
# Requires oath-toolkit homebrew package
#
# Optional configuration environment variables - $DIR_2FA (default is ~)
#
# Optional command line argument - name of file to load from $DIR_2FA/ (default is .secret_2fa)
#

set -o nounset
set -o pipefail
set -o errexit

if [ ! "${DIR_2FA:-}" ]
then
  DIR_2FA=~
fi

if [ "${1:-}" ]
then
  KEYFILE="$DIR_2FA/${1:-}"
else
  KEYFILE="$DIR_2FA/.secret_2fa"
fi

LAST_ENTRY_FILE=~/".2fa-last-${1:-}.txt"

SECRET_2FA="$(cat "$KEYFILE" | tr -d \ )"

if [ -e "$LAST_ENTRY_FILE" ]
then
  last_entry=$(cat $LAST_ENTRY_FILE)
  echo "Found last entry:"
  echo "$last_entry"
else
  last_entry=""
fi

new_entry=""

echo -n "Generating new 2fa password"
while [[ "$new_entry" == "$last_entry" || ! "$new_entry" ]]
do
  echo -n "."
  new_entry=$(oathtool --totp -b $SECRET_2FA)
done
echo

echo $new_entry
touch "$LAST_ENTRY_FILE"
echo "$new_entry" > "$LAST_ENTRY_FILE"
echo $new_entry | pbcopy
