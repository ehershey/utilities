#!/bin/bash
#
# Run a command and cache the output. If output from a previous duplicate
# execution exists from more recent than <lifetime seconds ago, re-use the
# output.
#
# usage: cache_run <lifetime> <cmd> [ <extra key component> ]
#

set -o errexit
set -o nounset
set -o pipefail

cachedir="$HOME/.generic_cache"

TIMEOUT=2

if [ ! -d "$cachedir" ]
then
	mkdir "$cachedir"
fi

cache_life=$1
cmd=$2
key_extra="${3:-}" # optional

if [ ! "$cmd" ]
then
	echo "usage: $0 <data_lifetime> <cmd> [ <extra key component> ]"
	exit 2
fi

cachefile="$cachedir"/`echo "$key_extra$cmd" | sed 's/[^0-9a-zA-Z_-]/_/g'`

log() {
  LOG="/tmp/cache_run.log"
#  date >> $LOG
# echo "$*" >> $LOG
}

log "cache_life: $cache_life"
log "cachefile: $cachefile"
log "cmd: $cmd"


if [ -e "$cachefile.out" -a -e "$cachefile.err" ]
then
	# check if content has expired using stdout file
	#
	file_mtime=`perl -MFile::stat -e 'print stat("'$cachefile.out'")->mtime'`

	current_time=`date +%s`
	if [ `expr $current_time - $file_mtime` -lt $cache_life ]
	then
    cat "$cachefile.out" >&1
    cat "$cachefile.err" >&2
		exit
	fi
fi
trap "rm \"$cachefile.out\" \"$cachefile.err\"" INT
eval $cmd 2>"$cachefile.err" | tee "$cachefile.out" 
cat "$cachefile.err" >&2
